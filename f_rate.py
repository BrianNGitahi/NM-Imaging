# This script is used for analysis of the effect of 
# changing the firing rate of the neuron on the measured signal

# import necessary pacakges
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas as pd
import scipy as sp

from Functions import simulate_neuron, simulate_nm_conc, simulate_flourescence_signal


# ANALYSIS 1:

# Define function that makes generates several firing neurons with different firing rates
# and then compares the average df/f signal across them

def signal_vs_activity(number_neurons,firing_rates):

    # create array to store the average signals generated by the neurons
    average_signals = []

    # for each firing rate, simulate a neuron, the nm dynamics from it and the signal
    # then get the average signal
    for i in range(firing_rates.size):
        
        # simulate neuron with different firing rate
        guinea_neuron = simulate_neuron(70000,firing_rates[i])

        # generate the nm_conc
        guinea_nm_conc, guinea_b_conc, guinea_c_conc = simulate_nm_conc(guinea_neuron,nm_conc0=0,k_b=0.6, k_r=0.4,gamma=0.004)

        # then generate the signal
        guinea_signal = simulate_flourescence_signal(K_D = 1000, F_max = 45, F_min = 10, nm_conc=guinea_nm_conc)

        # get the average of this signal and add it the original array
        average_signals.append(np.average(guinea_signal))

        print('simulated {} neuron(s)'.format(i+1))


    # plot the different firing rates vs their signals
    plt.scatter(firing_rates,average_signals)
    plt.xlabel('Firing rates(Hz)')
    plt.ylabel('Average df/f signal')
    plt.title('Signal vs activity plot')
    plt.show()

    # plot at log scale
    plt.loglog(firing_rates,average_signals, 'o')
    plt.xlabel('Firing rates(Hz)')
    plt.ylabel('Average df/f signal')
    plt.title('Signal vs activity plot - Log')
    plt.show()


# Check 1:
signal_vs_activity(2,np.array([1,2,4,10,50,70,100,200,300,400,500,600,700,800,900,1000,1500,2000,2500,3000,5000]))

# results: looks plausible -- tho at a big scale it has a linear/exponential trend then it levels off 
# -- it's linear

# TO ADD:
# constrict to the region , 1000 hz
# then also get an r2 estimate

